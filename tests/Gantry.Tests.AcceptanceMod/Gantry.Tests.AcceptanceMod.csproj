<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net7.0</TargetFramework>
		<LangVersion>11</LangVersion>
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
		<OutputType>Library</OutputType>
		<RestoreProjectStyle>PackageReference</RestoreProjectStyle>
		<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
		<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
		<Configurations>Debug;Release;Package</Configurations>
		<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
		<WarningsAsErrors />
		<Version>1.0.0.0</Version>
	</PropertyGroup>

	<ItemGroup>
	  <ProjectReference Include="..\..\src\Gantry\Gantry.csproj" />
	</ItemGroup>


	<ItemGroup>
		<!-- Vintage Story Game Engine -->
		<Reference Include="VintagestoryAPI">
			<HintPath>$(VINTAGE_STORY)\VintagestoryAPI.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<Reference Include="VintagestoryLib">
			<HintPath>$(VINTAGE_STORY)\VintagestoryLib.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<Reference Include="VSEssentials">
			<HintPath>$(VINTAGE_STORY)\Mods\VSEssentials.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<Reference Include="VSSurvivalMod">
			<HintPath>$(VINTAGE_STORY)\Mods\VSSurvivalMod.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<Reference Include="VSCreativeMod">
			<HintPath>$(VINTAGE_STORY)\Mods\VSCreativeMod.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<!-- Vintage Story Game Libraries -->
		<Reference Include="0Harmony">
			<HintPath>$(VINTAGE_STORY)\Lib\0Harmony.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<Reference Include="Newtonsoft.Json">
			<HintPath>$(VINTAGE_STORY)\Lib\Newtonsoft.Json.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<Reference Include="protobuf-net">
			<HintPath>$(VINTAGE_STORY)\Lib\protobuf-net.dll</HintPath>
			<Private>false</Private>
		</Reference>
		<Reference Include="cairo-sharp">
			<HintPath>$(VINTAGE_STORY)\Lib\cairo-sharp.dll</HintPath>
			<Private>false</Private>
		</Reference>
	</ItemGroup>

	<PropertyGroup>
		<ModPackagerDir>C:\Users\Apache\source\repos\.tools\packager\</ModPackagerDir>
		<ModPackagerName>ModPackager.exe</ModPackagerName>
		<ModPackagerPath>$(ModPackagerDir)$(ModPackagerName)</ModPackagerPath>

		<ModInfoGeneratorDir>C:\Users\Apache\source\repos\.tools\mig\</ModInfoGeneratorDir>
		<ModInfoGeneratorName>mig.exe</ModInfoGeneratorName>
		<ModInfoGeneratorPath>$(ModInfoGeneratorDir)$(ModInfoGeneratorName)</ModInfoGeneratorPath>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Package|AnyCPU'">
		<DefineConstants>TRACE</DefineConstants>
		<Optimize>true</Optimize>
	</PropertyGroup>

	<Target Name="PostBuild" AfterTargets="PostBuildEvent">
		<Exec Command="if $(Configuration) == Debug (&#xD;&#xA;&#xD;&#xA;:: Generator Mod Info file. ::&#xD;&#xA;cd &quot;$(ModInfoGeneratorDir)&quot;&#xD;&#xA;&quot;$(ModInfoGeneratorPath)&quot; -a &quot;$(TargetPath)&quot; -o $(TargetDir)&#xD;&#xA;&#xD;&#xA;:: Copy all other relevant files to target directory. ::&#xD;&#xA;xcopy &quot;$(ProjectDir)_Includes\&quot; &quot;$(TargetDir)&quot; /y /e /s&#xD;&#xA;xcopy &quot;$(TargetDir)&quot; &quot;$(SolutionDir).debug\$(ProjectName)&quot; /y /e /s &gt; NUL&#xD;&#xA;xcopy &quot;$(ProjectDir)_Includes\&quot; &quot;$(SolutionDir).debug\$(ProjectName)&quot; /y /e /s &gt; NUL&#xD;&#xA;&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;if $(Configuration) == Package (&#xD;&#xA;&#xD;&#xA;:: Copy all other relevant files to target directory. ::&#xD;&#xA;xcopy &quot;$(ProjectDir)_Includes\&quot; &quot;$(TargetDir)_Includes\&quot; /y /e /s&#xD;&#xA;&#xD;&#xA;:: Package the mod. ::&#xD;&#xA;cd &quot;$(ModPackagerDir)&quot;&#xD;&#xA;&quot;$(ModPackagerPath)&quot; -a &quot;$(TargetPath)&quot;&#xD;&#xA;&#xD;&#xA;:: Copy mod package to releases directory. ::&#xD;&#xA;copy /y &quot;$(TargetDir)release\*.zip&quot; &quot;$(SolutionDir).releases&quot;&#xD;&#xA;&#xD;&#xA;)" />
	</Target>

	<Target Name="PreBuild" BeforeTargets="PreBuildEvent">
		<Exec Command=":: Clean output directories. ::&#xD;&#xA;del /f /s /q $(SolutionDir).debug\$(ProjectName) &gt; NUL&#xD;&#xA;rmdir /s /q $(SolutionDir).debug\$(ProjectName) &gt; NUL&#xD;&#xA;del /f /s /q $(SolutionDir).release\ &gt; NUL&#xD;&#xA;rmdir /s /q $(SolutionDir).release\ &gt; NUL&#xD;&#xA;&#xD;&#xA;:: Rebuild necessary folders. ::&#xD;&#xA;if not exist $(SolutionDir).debug\$(ProjectName)\ mkdir $(SolutionDir).debug\$(ProjectName)\&#xD;&#xA;if not exist $(SolutionDir).release\ mkdir $(SolutionDir).release\" />
	</Target>

</Project>
