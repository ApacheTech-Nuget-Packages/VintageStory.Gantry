<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gantry.Core</name>
    </assembly>
    <members>
        <member name="T:Gantry.Core.Abstractions.StringEnum`1">
            <summary>
                Simple implementation of a string-based enumeration, allowing equatable string constants that can be implicitly
                cast to strings.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:Gantry.Core.Abstractions.StringEnum`1.ValueDict">
            <summary>
                A dictionary of values held be this instance.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.StringEnum`1.Value">
            <summary>
                The value given to this StringEnum member.
            </summary>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.Create(System.String)">
            <summary>
                Creates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.op_Implicit(Gantry.Core.Abstractions.StringEnum{`0})~System.String">
            <summary>
                Performs an implicit conversion from <see cref="T:Gantry.Core.Abstractions.StringEnum`1" /> to <see cref="T:System.String" />.
            </summary>
            <param name="enumValue">The enum value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.op_Inequality(Gantry.Core.Abstractions.StringEnum{`0},Gantry.Core.Abstractions.StringEnum{`0})">
            <summary>
                Determines whether the specified <see cref="T:Gantry.Core.Abstractions.StringEnum`1" />, is not equal to this instance.
            </summary>
            <param name="o1">The left operand of the operation.</param>
            <param name="o2">The right operand of the operation.</param>
            <returns>
                Returns <c>true</c> if the left and right operands are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.op_Equality(Gantry.Core.Abstractions.StringEnum{`0},Gantry.Core.Abstractions.StringEnum{`0})">
            <summary>
                Determines whether the specified <see cref="T:Gantry.Core.Abstractions.StringEnum`1" />, is equal to this instance.
            </summary>
            <param name="o1">The left operand of the operation.</param>
            <param name="o2">The right operand of the operation.</param>
            <returns>
                Returns <c>true</c> if the left and right operands are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.Parse(System.String,System.Boolean)">
            <summary>
                Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="value">The value.</param>
            <param name="caseSensitive">If set to <c>true</c>, the value will be parsed as a case sensitive string. Default is False.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.TryParse(System.String,System.Boolean,`0@)">
            <summary>
                Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
                A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="caseSensitive"><c>false</c> to ignore case; <c>true</c> to consider case.</param>
            <param name="result">
                When this method returns, result contains an object of type T whose value is represented by value if the parse operation succeeds.
                If the parse operation fails, result contains the default value of the underlying type of T.
                Note that this value need not be a member of the T enumeration.
                This parameter is passed uninitialised.
            </param>
            <returns>true if the <paramref name="value">value</paramref> parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="T:Gantry.Core.ApiEx">
            <summary>
                
            </summary>
        </member>
        <member name="M:Gantry.Core.ApiEx.Initialise(Vintagestory.API.Common.ICoreAPI,System.Type)">
            <summary>
                Initialises the API Extension Helper.
            </summary>
            <param name="api">The API.</param>
            <param name="assemblyMarker">The assembly marker.</param>
            <exception cref="T:System.TypeLoadException"></exception>
        </member>
        <member name="M:Gantry.Core.ApiEx.Initialise(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.ModInfoAttribute)">
            <summary>
                Initialises the API Extension Helper.
            </summary>
            <param name="api">The API.</param>
            <param name="modInfo">The assembly marker.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Gantry.Core.ApiEx.ModInfo">
            <summary>
                Gets the mod information.
            </summary>
            <value>The mod information.</value>
        </member>
        <member name="P:Gantry.Core.ApiEx.ModInfoSide">
            <summary>
                Gets the side designated within the mod information.
            </summary>
            <value>
                The side designated within the mod information.
            </value>
            <exception cref="T:System.InvalidOperationException">Cannot determine app-side before `ApiEx` is intialised.</exception>
        </member>
        <member name="P:Gantry.Core.ApiEx.Client">
            <summary>
                The core API implemented by the client.<br/>
                The main interface for accessing the client.<br/>
                Contains all sub-components, and some miscellaneous methods.
            </summary>
            <value>The client-side API.</value>
        </member>
        <member name="P:Gantry.Core.ApiEx.Server">
            <summary>
                The core API implemented by the server.<br/>
                The main interface for accessing the server.<br/>
                Contains all sub-components, and some miscellaneous methods.
            </summary>
            <value>The server-side API.</value>
        </member>
        <member name="P:Gantry.Core.ApiEx.Current">
            <summary>
                Common API Components that are available on the server and the client.<br/>
                Cast to ICoreServerAPI, or ICoreClientAPI, to access side specific features.
            </summary>
            <value>The universal API.</value>
        </member>
        <member name="P:Gantry.Core.ApiEx.ClientMain">
            <summary>
                The concrete implementation of the <see cref="T:Vintagestory.API.Client.IClientWorldAccessor"/> interface.<br/>
                Contains access to lots of world manipulation and management features.
            </summary>
            <value>
                The <see cref="T:Vintagestory.Client.NoObf.ClientMain"/> instance that controls access to features within the gameworld.
            </value>
        </member>
        <member name="P:Gantry.Core.ApiEx.ServerMain">
            <summary>
                The concrete implementation of the <see cref="T:Vintagestory.API.Server.IServerWorldAccessor"/> interface. Contains access to lots of world manipulation and management features.
            </summary>
            <value>
                The <see cref="T:Vintagestory.Server.ServerMain"/> instance that controls access to features within  the gameworld.
            </value>
        </member>
        <member name="M:Gantry.Core.ApiEx.OneOf``1(``0,``0)">
            <summary>
                Chooses between one of two objects, based on whether it's being called by the client, or the server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientObject">The client object.</param>
            <param name="serverObject">The server object.</param>
            <returns>
                Returns <paramref name="clientObject"/> if called from the client, or <paramref name="serverObject"/> if called from the server.
            </returns>
        </member>
        <member name="M:Gantry.Core.ApiEx.Run(System.Action,System.Action)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Return``1(System.Func{``0},System.Func{``0})">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Return``1(System.Func{``0},System.Func{``0},``0)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
            <param name="parameter">The parameter to pass to the invoked action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Run``1(System.Action{``0},System.Action{``0},``0)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
            <param name="parameter">The parameter to pass to the invoked action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.IsModEnabled(System.String)">
            <summary>
                Determines whether a given mod is installed, and enabled, on the current app-side.
            </summary>
            <param name="modId">The mod identifier.</param>
            <returns><c>true</c> if the mod is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Gantry.Core.ApiEx.Side">
            <summary>
                Gets the current app-side.
            </summary>
            <value>An <see cref="T:Vintagestory.API.Common.EnumAppSide"/> value, representing current app-side; Client, or Server.</value>
        </member>
        <member name="M:Gantry.Core.ApiEx.IsOnMainThread">
            <summary>
                Determines whether the current code block is running on the main thread. See remarks.
            </summary>
            <remarks>
                Within a Single-Player game, the server will never run on the main application thread.
                Single-Player servers are run as a background thread, within the client application.
            </remarks>
            <returns><c>true</c> if the code is currently running on the main application thread; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Gantry.Core.Exceptions.VintageModsException">
            <summary>
                Acts as a base class for all custom exceptions within the VintageMods domain.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Gantry.Core.Exceptions.VintageModsException.#ctor">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.Exceptions.VintageModsException"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.Exceptions.VintageModsException.#ctor(System.String)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.Exceptions.VintageModsException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Gantry.Core.Exceptions.VintageModsException.#ctor(System.String,System.Exception)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.Exceptions.VintageModsException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that was the cause of the current exception, or a null reference, if no inner exception is provided.</param>
        </member>
        <member name="M:Gantry.Core.Exceptions.VintageModsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.Exceptions.VintageModsException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Gantry.Core.Helpers.GameAssemblies">
            <summary>
                Direct access to the game's vanilla assemblies.
            </summary>
        </member>
        <member name="P:Gantry.Core.Helpers.GameAssemblies.VSEssentials">
            <summary>
                VSEssentials.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.Helpers.GameAssemblies.VSSurvivalMod">
            <summary>
                VSSurvivalMod.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.Helpers.GameAssemblies.VSCreativeMod">
            <summary>
                VSCreativeMod.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.Helpers.GameAssemblies.VintagestoryAPI">
            <summary>
                VintagestoryAPI.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.Helpers.GameAssemblies.VintagestoryLib">
            <summary>
                VintagestoryLib.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.Helpers.GameAssemblies.VintagestoryExe">
            <summary>
                Vintagestory.exe
            </summary>
        </member>
        <member name="P:Gantry.Core.Helpers.GameAssemblies.All">
            <summary>
                Retrieves a list of all the assemblies collated within the <see cref="T:Gantry.Core.Helpers.GameAssemblies"/> class. 
            </summary>
        </member>
        <member name="M:Gantry.Core.Helpers.GameAssemblies.FindType(System.Reflection.Assembly,System.String)">
            <summary>
                Scans for a specific type within one of the game's vanilla assemblies. Includes internal classes, and nested
                private classes. It can then be instantiated via Harmony.
            </summary>
            <param name="assembly">The assembly to scan within.</param>
            <param name="typeName">The name of the type to scan for.</param>
            <returns>The Type definition of the object being scanned for.</returns>
        </member>
        <member name="M:Gantry.Core.Helpers.GameAssemblies.FindType(System.String)">
            <summary>
                Scans for a specific type within the game's vanilla assemblies. Includes internal classes, and nested private
                classes. It can then be instantiated via Harmony.
            </summary>
            <param name="typeName">The name of the type to scan for.</param>
            <returns>The Type definition of the object being scanned for.</returns>
        </member>
        <member name="T:Gantry.Core.ModSystems.ClientModSystem">
            <summary>
                Acts as a base class for Client-Side Only ModSystems. Derived classes will only be loaded on the Client.
            </summary>
            <seealso cref="T:Gantry.Core.ModSystems.Generic.ModSystemBase" />
        </member>
        <member name="P:Gantry.Core.ModSystems.ClientModSystem.Capi">
            <summary>
                The core API implemented by the client. The main interface for accessing the client. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.ClientModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
                Returns if this mod should be loaded for the given app side.
            </summary>
            <param name="forSide">For side.</param>
            <returns><c>true</c> if the mod should be loaded on the specified side, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Gantry.Core.ModSystems.Generic.ModSystemBase">
            <summary>
                Base representation of a ModSystem used to extend Vintage Story.
            </summary>
            <seealso cref="T:Vintagestory.API.Common.ModSystem" />
        </member>
        <member name="P:Gantry.Core.ModSystems.Generic.ModSystemBase.UApi">
            <summary>
                Common API Components that are available on the server and the client.<br/>
                Cast to ICoreServerAPI, or ICoreClientAPI, to access side specific features.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.StartPre(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Called during initial mod loading, called before any mod receives the call to Start().
            </summary>
            <param name="api">
                Common API Components that are available on the server and the client.<br/>
                Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </param>
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.ExecuteOrder">
            <summary>
                If you need mods to be executed in a certain order, adjust this methods return value.<br/>
                The server will call each Mods Start() method the ascending order of each mods execute order value.<br/>
                And thus, as long as every mod registers it's event handlers in the Start() method, all event handlers<br/>
                will be called in the same execution order.<br/>
                Default execute order of some survival mod parts.<br/><br/>
            
                World Gen:<br/>
                - GenTerra: 0<br/>
                - RockStrata: 0.1<br/>
                - Deposits: 0.2<br/>
                - Caves: 0.3<br/>
                - BlockLayers: 0.4<br/><br/>
            
                Asset Loading:<br/>
                - Json Overrides loader: 0.05<br/>
                - Load hardcoded mantle block: 0.1<br/>
                - Block and Item Loader: 0.2<br/>
                - Recipes (Smithing, Knapping, ClayForming, Grid recipes, Alloys) Loader: 1
            </summary>
        </member>
        <member name="T:Gantry.Core.ModSystems.ServerModSystem">
            <summary>
                Acts as a base class for Server-Side Only ModSystems. Derived classes will only be loaded on the Server.
            </summary>
            <seealso cref="T:Gantry.Core.ModSystems.Generic.ModSystemBase" />
        </member>
        <member name="P:Gantry.Core.ModSystems.ServerModSystem.Sapi">
            <summary>
                The core API implemented by the server. The main interface for accessing the server. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.ServerModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
                Returns if this mod should be loaded for the given app side.
            </summary>
            <param name="forSide">For side.</param>
            <returns><c>true</c> if the mod should be loaded on the specified side, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Gantry.Core.ModSystems.UniversalModSystem">
            <summary>
                Acts as a base class for Universal Mod Systems, that work on both the Client, and Server.
            </summary>
            <seealso cref="T:Gantry.Core.ModSystems.Generic.ModSystemBase" />
        </member>
        <member name="P:Gantry.Core.ModSystems.UniversalModSystem.Capi">
            <summary>
                The core API implemented by the client. The main interface for accessing the client. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="P:Gantry.Core.ModSystems.UniversalModSystem.Sapi">
            <summary>
                The core API implemented by the server. The main interface for accessing the server. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.UniversalModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
                Returns if this mod should be loaded for the given app side.
            </summary>
            <param name="forSide">For side.</param>
            <returns><c>true</c> if the mod should be loaded on the specified side, <c>false</c> otherwise.</returns>
        </member>
    </members>
</doc>
